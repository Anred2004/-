#pragma warning(disable: 4996)
#include <iostream>
#include <cstring>

struct String
{
private:
	unsigned int m_size;
	char* m_str;//динамический массив
	friend std::ostream& operator <<(std::ostream& out, String& str);
	friend std::istream& operator >> (std::istream& out, String& str);
public:
	// базовый конструктор
	String()
	{
		m_str = 0;
		m_size = 0;
	}
	//конструктор копирования
	String(char* str)
	{
		m_size = strlen(str);
		m_str = new char[m_size + 1];
		std::copy(str, str + m_size + 1, m_str);
	}

	String(char c, int size)
	{
		m_size = size;
		m_str = new char[m_size + 1];
		for (int i = 0; i < m_size; i++) {
			m_str[i] = c;
		}
	}

	String& operator=(String& a)
	{
		std::swap(m_str, a.m_str);
		std::swap(m_size, a.m_size);
		return *this;
	}
	String& operator+=(const String& a)
	{
		char* newStr = new char[m_size + a.m_size+1];
		std::copy(m_str, m_str + m_size, newStr);
		std::copy(a.m_str, a.m_str + a.m_size+1, newStr+m_size);
		delete[] m_str;
		m_str = newStr;
		m_size = strlen(m_str);
		return *this;
	}
	String operator+(const String& b)
	{
		char* newStr = new char[m_size + b.m_size + 1];
		std::copy(m_str, m_str + m_size, newStr);
		std::copy(b.m_str, b.m_str + b.m_size + 1, newStr + m_size);
		//String str1('a', m_size);
		//str1 = *this;
		//str1.print();
		//str1 += b;
		return newStr;
	}

	char operator[](int a)
	{
		return m_str[a];
	}
	bool operator >(String& b)
	{
		return std::strcmp(m_str, b.m_str) > 0;
	}
	bool operator <(String& b) 
	{
		return std::strcmp(m_str, b.m_str) < 0;
	}
	bool operator ==(String& b)
	{
		return std::strcmp(m_str, b.m_str) == 0;
	}
	//деструктор
	~String()
	{
		delete[] m_str;//освобождаем память под строку
	}
	// метод length
	int length() const
	{
		return m_size;
	}

	void print()
	{
		std::cout << m_str << std::endl;
		std::cout << m_size << std::endl;
	}
	int find(char sym)
	{
		for (int i = 0; i < m_size; i++)
		{
			if (m_str[i] == sym)
			{
				return i;
			}

		}
		return -1;
	}

	char* c_str()
	{
		return m_str;
	}

};
std::ostream& operator <<(std::ostream& out, String& str)
{
	for (int i = 0; i < str.m_size; i++)
	{
		out << str.m_str[i];

	}
	out << std::endl;
	return out;
}
int main()
{
	String S("Hello world!!!");
	String s2(" vova");
	String s3 = S + s2;
	std::cout << S[2];
	s3.print();
	std::cout <<S.find('w');
	std::cout << S.length();
	std::cout << S;
	system("pause");
}

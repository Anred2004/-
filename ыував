#include <iostream>
#include <string>
#include <fstream>
#include <vector>
using namespace std;

struct xy
{
	int numb;
	string str;
};
class Practical
{
private:

	vector<xy>Vector;
	vector<int>Key;
	int Fib[100];


public:

	void fibonachi(int m)
	{
		for (int i = 1; i < m; i++)
		{
			if (i == 0)
			{
				Fib[i] = 0;
			}
			else if ((i == 1) || (i == 2))
			{
				Fib[i] = 1;
			}
			else
			{
				Fib[i] = Fib[i - 1] + Fib[i - 2];
			}
		}

	}
	void read()
	{
		fibonachi(20);
		ifstream fin("input.txt");
		ofstream fout("output.txt");
		string word;
		int i = 2;
		while (fin >> word)
		{
			xy s;
			s.numb = Fib[i];
			s.str = word;
			Vector.push_back(s);
			i++;
		}

		for (int i = 0; i < Vector.size(); i++)
		{
			fout << Vector[i].numb << " " << Vector[i].str << endl;
		}
	}

	void decode()
	{
		read();
		int k = 0;
		int sym = 0;
		int size = 0;
		cin >> size;
		for (int i = 0; i < size; i++)
		{
			cin >> sym;
			Key.push_back(sym);
			//cout << Key[i] << endl;
		}
		for (int i = 0; i < Key.size(); i++)
		{
			for (int j = 0; j < Key.size(); j++)
			{
				if (Vector[i].numb == Key[j])
				{
					k++;
				}
			}
		}
		if (Vector.size() != Key.size())
		{
			cout << "Error1" << endl;
		}
		else if (k != Key.size())
		{
			cout << "Error2 "<< endl;
		}
		else
		{
			for (int i = 0; i < Vector.size(); i++)
			{
				for (int j = 0; j < Vector.size(); j++)
				{
					while (Vector[i].numb != Key[j])
					{
						swap(Vector[i].str, Vector[j].str);
						
					}
					for (int i = 0; i < Vector.size(); i++)
					{
						cout << Vector[i].str << endl;
					}
					
				}
			}

		}

	}
};
int main()
{
	Practical shifr;
	shifr.decode();
	system("pause");

}


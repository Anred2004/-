//внешняя многофазная
#include <iostream>
#include <fstream>
int main()
{
    std::ifstream in;
    std::ofstream out, out1, out2;

    int a, b, size = 0, countA, countB, count;
    bool flag = true, Afull, Bfull;

    in.open("input.txt");
    out.open("result.txt");
    while (in >> a)
    {
        out << a << " ";
        size++;
    }
    in.close();
    out.close();
    /*длина серий фиксируется на каждом шаге.
    В исходном файле все серии имеют длину 1,
    после первого шага она равна 2, после второго – 4,
    после третьего – 8, после k -го шага – 2k*/
    for (int partSize = 1; partSize < size; partSize *= 2)
    {
        //Исходный файл разбивается на два вспомогательных файла 
        in.open("result.txt");
        out1.open("A.txt");
        out2.open("B.txt");
        count = 0;
        while (in >> a)
        {
            count++;
            if (flag) out1 << a << " ";
            else
                out2 << a << " ";
            if (count == partSize)
            {
                count = 0;
                flag = !flag;
            }
        }
        in.close();
        out1.close();
        out2.close();

        std::ifstream in1, in2;
        in1.open("A.txt");
        in2.open("B.txt");
        out.open("result.txt");
        //вспомогательные файлы сливаются в файл 
        // при этом одиночные элементы образуют упорядоченные пары.
        if (in1 >> a)
            Afull = true;
        else
            Afull = false;
        if (in2 >> b)
            Bfull = true;
        else
            Bfull = false;
        //Полученный файл  вновь обрабатывается
        //При этом упорядоченные пары переходят в упорядоченные четверки.
        for (int i = 0; i < size; i += 2 * partSize)
        {
            countA = 0; countB = 0;
            while (countA < partSize && Afull && countB < partSize && Bfull)
            {
                if (a < b)
                {
                    out << a << " ";
                    if (in1 >> a)
                        Afull = true;
                    else
                        Afull = false;
                    countA++;
                }
                else
                {
                    out << b << " ";
                    if (in2 >> b)
                        Bfull = true;
                    else
                        Bfull = false;
                    countB++;
                }
            }
            //Повторяя шаги, сливаем четверки в восьмерки и т.д.,
            //каждый раз удваивая длину слитых последовательностей до тех пор, пока не будет упорядочен целиком весь файл
            while (countA < partSize && Afull)
            {
                out << a << " ";
                if (in1 >> a)
                    Afull = true;
                else
                    Afull = false;
                countA++;
            }
            while (countB < partSize && Bfull)
            {
                out << b << " ";
                if (in2 >> b)
                    Bfull = true;
                else
                    Bfull = false;
                countB++;
            }

        }

        in1.close();
        in2.close();
        out.close();
    }
    return 0;
}

//Запускается цикл, в котором выполняется сортировка по сериям.Длина серий увеличивается в два раза на каждой итерации цикла.
//Читается каждое число из файла "result.txt" и записывается в файл "A.txt" или "B.txt" в зависимости от значения флага.Флаг переключается 
// каждый раз, когда записана серия чисел заданной длины.
//Открываются файлы "A.txt" и "B.txt" для чтения, а также файл "result.txt" для записи.
//Читается первое число из файла "A.txt" и проверяется, является ли файл полным(Afull).Аналогично для файла "B.txt" (Bfull).
//Выполняется слияние чисел из файлов "A.txt" и "B.txt" в файл "result.txt".При этом формируются упорядоченные пары чисел.
//Повторяется процесс слияния, но уже с упорядоченными парами чисел.Каждый раз удваивается длина слитых последовательностей.
//Цикл продолжается до тех пор, пока весь файл не будет полностью упорядочен.
//Закрывается основной цикл и программа завершается.
//Алгоритм внешней многофазной сортировки состоит в разделении исходного файла на несколько вспомогательных файлов, 
//сортировке их отдельно, а затем последовательном слиянии этих файлов до получения отсортированного 
//файла.Каждый этап сортировки увеличивает длину серий, пока не будет достигнута полная сортировка всего файла.
